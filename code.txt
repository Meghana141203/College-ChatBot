#include <Servo.h>

Servo myservo;

// Ultrasonic sensor pins for entrance
const int trigPin1 = 2;
const int echoPin1 = 3;

// Ultrasonic sensor pins for exit
const int trigPin2 = 4;
const int echoPin2 = 5;

// LED pins
const int greenLED = 7;  // Green LED for available parking slots
const int redLED = 8;    // Red LED for parking full

const int maxSlots = 4;  // Maximum number of parking slots
int Slot = maxSlots;     // Start with all slots available
int flag1 = 0;
int flag2 = 0;

long duration1, distance1;
long duration2, distance2;

void setup() {
  Serial.begin(9600);  // Initialize the Serial Monitor

  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  
  // Initialize LED pins
  pinMode(greenLED, OUTPUT);
  pinMode(redLED, OUTPUT);
  
  // Initially set Green LED to ON (indicating slots available)
  digitalWrite(greenLED, HIGH);
  digitalWrite(redLED, LOW);
  
  myservo.attach(6);    // Servo attached to pin 6
  myservo.write(100);   // Set initial servo position (closed)
  
  // Print welcome message to Serial Monitor
  Serial.println("ARDUINO PARKING SYSTEM");
  delay(2000);
}

void loop() {
  // Measure distance using Ultrasonic Sensor 1 (Entrance)
  digitalWrite(trigPin1, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin1, LOW);
  duration1 = pulseIn(echoPin1, HIGH);
  distance1 = duration1 * 0.034 / 2;
  
  // Measure distance using Ultrasonic Sensor 2 (Exit)
  digitalWrite(trigPin2, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin2, LOW);
  duration2 = pulseIn(echoPin2, HIGH);
  distance2 = duration2 * 0.034 / 2;

  // Check if a vehicle is detected at the entrance
  if (distance1 < 20 && flag1 == 0) {  // Object detected within 20 cm
    if (Slot > 0) {  // Only allow entry if slots are available
      flag1 = 1;
      if (flag2 == 0) {
        myservo.write(0);  // Open gate
        Slot = Slot - 1;   // Reduce the available slots by 1
        Serial.println("Gate opened, car entered.");
        delay(3000);  // Wait for the car to pass through
        myservo.write(100);  // Close the gate
        Serial.println("Gate closed.");
      }
    } else {
      Serial.println("SORRY :( Parking Full");
      delay(3000);
    }
  }

  // Check if a vehicle is detected at the exit
  if (distance2 < 20 && flag2 == 0) {  // Object detected within 20 cm
    flag2 = 1;
    if (flag1 == 0 && Slot < maxSlots) {  // Ensure slot count doesn't exceed maxSlots
      myservo.write(0);  // Open gate for exit
      Slot = Slot + 1;   // Increase the available slots by 1
      Serial.println("Gate opened, car exited.");
      delay(3000);  // Wait for the car to pass through
      myservo.write(100);  // Close the gate
      Serial.println("Gate closed.");
    }
  }

  // Reset flags after each operation to continue checking
  if (flag1 == 1 && flag2 == 0) {
    flag1 = 0;
  }
  
  if (flag2 == 1 && flag1 == 0) {
    flag2 = 0;
  }

  // Control LED lights based on available slots
  if (Slot > 0) {
    digitalWrite(greenLED, HIGH);  // Green LED ON when slots are available
    digitalWrite(redLED, LOW);     // Red LED OFF
  } else {
    digitalWrite(greenLED, LOW);   // Green LED OFF when full
    digitalWrite(redLED, HIGH);    // Red LED ON when parking is full
  }

  // Print available slots to Serial Monitor
  Serial.print("WELCOME! Slots Left: ");
  Serial.println(Slot);

  delay(500);  // Slight delay to prevent rapid sensor readings
}